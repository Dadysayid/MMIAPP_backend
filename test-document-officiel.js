const fs = require('fs');
const path = require('path');
const PDFDocument = require('pdfkit');

async function testDocumentOfficiel() {
  try {
    console.log('üß™ Test de g√©n√©ration du document officiel...\n');
    
    // 1. V√©rifier l'existence du logo
    console.log('üñºÔ∏è 1. V√©rification du logo :');
    const logoPath = path.join(__dirname, 'assets', 'logo.png');
    
    if (fs.existsSync(logoPath)) {
      const stats = fs.statSync(logoPath);
      console.log(`   ‚úÖ Logo trouv√©: ${logoPath}`);
      console.log(`   üìä Taille: ${(stats.size / 1024).toFixed(2)} KB`);
      console.log(`   üìÖ Modifi√©: ${stats.mtime}`);
    } else {
      console.log(`   ‚ùå Logo non trouv√©: ${logoPath}`);
      console.log('   üí° V√©rifiez que le fichier logo.png existe dans le dossier assets/');
      return;
    }
    
    // 2. V√©rifier le dossier assets
    console.log('\nüìÅ 2. V√©rification du dossier assets :');
    const assetsDir = path.join(__dirname, 'assets');
    
    if (fs.existsSync(assetsDir)) {
      const files = fs.readdirSync(assetsDir);
      console.log(`   ‚úÖ Dossier assets trouv√©: ${assetsDir}`);
      console.log(`   üìã Fichiers pr√©sents: ${files.join(', ')}`);
    } else {
      console.log(`   ‚ùå Dossier assets non trouv√©: ${assetsDir}`);
      console.log('   üí° Cr√©ez le dossier assets/ et placez-y le logo.png');
      return;
    }
    
    // 3. Test de cr√©ation du document PDF
    console.log('\nüìÑ 3. Test de cr√©ation du document PDF :');
    
    try {
      const doc = new PDFDocument({
        size: 'A4',
        margins: {
          top: 50,
          bottom: 50,
          left: 50,
          right: 50
        }
      });
      
      console.log('   ‚úÖ Document PDF cr√©√© avec succ√®s');
      
      // Test des √©v√©nements
      let chunks = [];
      doc.on('data', chunk => {
        chunks.push(chunk);
        console.log(`   üì¶ Chunk re√ßu: ${chunk.length} bytes`);
      });
      
      doc.on('end', () => {
        const buffer = Buffer.concat(chunks);
        console.log(`   ‚úÖ PDF termin√©: ${buffer.length} bytes`);
        
        // Sauvegarder le PDF de test
        const testPath = path.join(__dirname, 'test-document-officiel.pdf');
        fs.writeFileSync(testPath, buffer);
        console.log(`   üíæ PDF sauvegard√©: ${testPath}`);
      });
      
      doc.on('error', (error) => {
        console.log(`   ‚ùå Erreur PDF: ${error.message}`);
      });
      
      // Test d'ajout du logo
      console.log('   üñºÔ∏è Test d\'ajout du logo...');
      try {
        doc.image(logoPath, 50, 50, { width: 80, height: 80 });
        console.log('   ‚úÖ Logo ajout√© au PDF');
      } catch (logoError) {
        console.log(`   ‚ùå Erreur ajout logo: ${logoError.message}`);
      }
      
      // Test d'ajout du contenu officiel
      console.log('   üìã Test d\'ajout du contenu officiel...');
      
      // En-t√™te
      doc.fontSize(18)
         .font('Helvetica-Bold')
         .text('MINIST√àRE DES MINES ET DE L\'INDUSTRIE', { align: 'center' });
      
      doc.moveDown(0.5);
      doc.fontSize(14)
         .font('Helvetica')
         .text('Direction G√©n√©rale de l\'Industrie', { align: 'center' });
      
      doc.moveDown(2);
      
      // Destinataire
      doc.fontSize(12)
         .font('Helvetica-Bold')
         .text('Monsieur le Directeur G√©n√©ral de l\'ETS XXXX');
      
      doc.moveDown(1);
      
      // Objet
      doc.fontSize(12)
         .font('Helvetica-Bold')
         .text('Objet : Autorisation d\'Installation d\'une unit√© de recyclage de plastique');
      
      // R√©f√©rence
      doc.fontSize(12)
         .font('Helvetica')
         .text(`R√©f√©rence : TEST-001 - ${new Date().toLocaleDateString('fr-FR')}`);
      
      doc.moveDown(1);
      
      // Corps du document (version courte pour le test)
      doc.fontSize(12)
         .font('Helvetica')
         .text('Monsieur le directeur g√©n√©ral,');
      
      doc.moveDown(1);
      
      doc.text('Faisant suite √† votre lettre ci-dessus r√©f√©renc√©e, j\'ai l\'honneur de vous informer que notre D√©partement donne son accord de principe pour l\'Installation par votre soci√©t√© dans la wilaya de Nouakchott.');
      
      doc.moveDown(2);
      
      // Signature
      doc.fontSize(12)
         .font('Helvetica')
         .text('                                                                                                                         signature du ministre', { align: 'right' });
      
      doc.moveDown(0.5);
      doc.fontSize(12)
         .font('Helvetica-Bold')
         .text('THIAM Tidjani', { align: 'right' });
      
      // Finalisation
      doc.end();
      
    } catch (pdfError) {
      console.log(`   ‚ùå Erreur cr√©ation PDF: ${pdfError.message}`);
      return;
    }
    
    // 4. Recommandations
    console.log('\nüí° 4. Recommandations :');
    console.log('   üîß Assurez-vous que logo.png est dans le dossier assets/');
    console.log('   üîß V√©rifiez que le logo est au format PNG valide');
    console.log('   üîß Red√©marrez le serveur backend apr√®s v√©rification');
    console.log('   üîß Testez la pr√©visualisation dans l\'interface');
    
    console.log('\n‚úÖ Test du document officiel termin√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

testDocumentOfficiel();



