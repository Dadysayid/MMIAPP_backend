const PDFDocument = require('pdfkit');
const QRCode = require('qrcode');
const mysql = require('mysql2/promise');
const path = require('path'); // Added missing import for path

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'gestion_autorisations'
};

async function testGenerationPDF() {
  try {
    console.log('üìÑ Test de g√©n√©ration PDF...\n');
    
    // 1. Test de cr√©ation du document PDF
    console.log('üìã 1. Test de cr√©ation du document PDF :');
    
    try {
      const doc = new PDFDocument({
        size: 'A4',
        margins: {
          top: 50,
          bottom: 50,
          left: 50,
          right: 50
        }
      });
      console.log('   ‚úÖ Document PDF cr√©√© avec succ√®s');
      console.log(`   üìè Taille: ${doc.page.width} x ${doc.page.height}`);
      console.log(`   üìê Marges: ${doc.page.margins.top}px`);
      
      // Test des √©v√©nements
      let chunks = [];
      doc.on('data', chunk => {
        chunks.push(chunk);
        console.log(`   üì¶ Chunk re√ßu: ${chunk.length} bytes`);
      });
      
      doc.on('end', () => {
        const buffer = Buffer.concat(chunks);
        console.log(`   ‚úÖ PDF termin√©: ${buffer.length} bytes`);
      });
      
      doc.on('error', (error) => {
        console.log(`   ‚ùå Erreur PDF: ${error.message}`);
      });
      
    } catch (pdfError) {
      console.log(`   ‚ùå Erreur cr√©ation PDF: ${pdfError.message}`);
      return;
    }
    
    // 2. Test de la base de donn√©es
    console.log('\nüóÑÔ∏è 2. Test de la base de donn√©es :');
    
    const conn = await mysql.createConnection(dbConfig);
    
    // V√©rifier la demande 14
    const [demande14] = await conn.execute(`
      SELECT d.id, d.reference, d.type, d.statut, d.donnees,
             u.nom_responsable, u.prenom_responsable, u.email, u.telephone, u.adresse
      FROM demandes d
      JOIN utilisateurs u ON d.utilisateur_id = u.id
      WHERE d.id = 14
    `);
    
    if (demande14.length === 0) {
      console.log('   ‚ùå Demande 14 non trouv√©e');
      await conn.end();
      return;
    }
    
    const demande = demande14[0];
    console.log(`   ‚úÖ Demande trouv√©e: ${demande.reference}`);
    console.log(`   üìä Type: ${demande.type}`);
    console.log(`   üìä Statut: ${demande.statut}`);
    console.log(`   üë§ Demandeur: ${demande.prenom_responsable} ${demande.nom_responsable}`);
    
    // 3. Test de g√©n√©ration PDF compl√®te
    console.log('\nüîß 3. Test de g√©n√©ration PDF compl√®te :');
    
    try {
      const pdfBuffer = await generateTestPDF(demande);
      console.log(`   ‚úÖ PDF g√©n√©r√© avec succ√®s: ${pdfBuffer.length} bytes`);
      
      // Sauvegarder le PDF de test
      const fs = require('fs');
      const testPath = path.join(__dirname, 'test-preview.pdf');
      fs.writeFileSync(testPath, pdfBuffer);
      console.log(`   üíæ PDF sauvegard√©: ${testPath}`);
      
    } catch (pdfError) {
      console.log(`   ‚ùå Erreur g√©n√©ration PDF: ${pdfError.message}`);
      console.log(`   üìã Stack trace: ${pdfError.stack}`);
    }
    
    await conn.end();
    
    // 4. Recommandations
    console.log('\nüí° 4. Recommandations :');
    console.log('   üîß Red√©marrez le serveur backend apr√®s les corrections');
    console.log('   üîß V√©rifiez que PDFKit est install√©: npm install pdfkit');
    console.log('   üîß V√©rifiez que QRCode est install√©: npm install qrcode');
    console.log('   üîß Testez la pr√©visualisation dans l\'interface');
    
    console.log('\n‚úÖ Test de g√©n√©ration PDF termin√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Fonction de test de g√©n√©ration PDF
async function generateTestPDF(demande) {
  return new Promise(async (resolve, reject) => {
    try {
      console.log('      üìù D√©but de g√©n√©ration PDF...');
      
      const doc = new PDFDocument({
        size: 'A4',
        margins: {
          top: 50,
          bottom: 50,
          left: 50,
          right: 50
        }
      });
      
      const chunks = [];
      doc.on('data', chunk => chunks.push(chunk));
      doc.on('end', () => {
        console.log('      üìÑ PDF termin√©, cr√©ation du buffer...');
        const buffer = Buffer.concat(chunks);
        resolve(buffer);
      });
      
      doc.on('error', (error) => {
        console.log(`      ‚ùå Erreur PDF: ${error.message}`);
        reject(error);
      });
      
      // En-t√™te avec logo
      console.log('      üèõÔ∏è Ajout de l\'en-t√™te...');
      doc.fontSize(18)
         .font('Helvetica-Bold')
         .text('MINIST√àRE DES MINES ET DE L\'INDUSTRIE', { align: 'center' });
      
      doc.moveDown(0.5);
      doc.fontSize(14)
         .font('Helvetica')
         .text('Direction G√©n√©rale de l\'Industrie', { align: 'center' });
      
      doc.moveDown(1);
      
      // Informations de la demande
      console.log('      üìã Ajout des informations de la demande...');
      doc.fontSize(16)
         .font('Helvetica-Bold')
         .text('PR√âVISUALISATION - AUTORISATION', { align: 'center' });
      
      doc.moveDown(1);
      
      // D√©tails de la demande
      doc.fontSize(12)
         .font('Helvetica-Bold')
         .text(`R√©f√©rence: ${demande.reference}`);
      
      doc.fontSize(12)
         .font('Helvetica')
         .text(`Type: ${demande.type}`);
      
      doc.text(`Demandeur: ${demande.prenom_responsable} ${demande.nom_responsable}`);
      doc.text(`Email: ${demande.email || 'Non renseign√©'}`);
      doc.text(`T√©l√©phone: ${demande.telephone || 'Non renseign√©'}`);
      doc.text(`Adresse: ${demande.adresse || 'Non renseign√©e'}`);
      
      doc.moveDown(1);
      
      // Zone de signature (pr√©visualisation)
      console.log('      ‚úçÔ∏è Ajout de la zone de signature...');
      doc.fontSize(14)
         .font('Helvetica-Bold')
         .text('ZONE DE SIGNATURE', { align: 'center' });
      
      doc.moveDown(0.5);
      doc.fontSize(10)
         .font('Helvetica')
         .text('(Signature du Ministre √† apposer ici)', { align: 'center' });
      
      // QR Code de pr√©visualisation
      console.log('      üì± Ajout du QR code...');
      doc.moveDown(1);
      const qrData = `PREVIEW-${demande.reference}-${Date.now()}`;
      
      doc.fontSize(8)
         .font('Helvetica')
         .text('QR Code de pr√©visualisation', { align: 'center' });
      
      console.log('      üèÅ Finalisation du PDF...');
      doc.end();
      
    } catch (error) {
      console.log(`      ‚ùå Erreur dans generateTestPDF: ${error.message}`);
      reject(error);
    }
  });
}

testGenerationPDF();



