const mysql = require('mysql2/promise');

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'gestion_autorisation'
};

async function fixReferences() {
  try {
    console.log('üîß Diagnostic et correction des r√©f√©rences des demandes...');
    
    const conn = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Connexion DB OK');
    
    // 1. Analyser les r√©f√©rences existantes
    console.log('\nüìä ANALYSE DES R√âF√âRENCES EXISTANTES:');
    const [references] = await conn.execute(
      'SELECT reference, COUNT(*) as count FROM demandes GROUP BY reference ORDER BY reference'
    );
    
    references.forEach(ref => {
      if (ref.count > 1) {
        console.log(`‚ö†Ô∏è  R√âF√âRENCE DUPLIQU√âE: ${ref.reference} (${ref.count} fois)`);
      } else {
        console.log(`‚úÖ ${ref.reference} (${ref.count} fois)`);
      }
    });
    
    // 2. V√©rifier les s√©quences par date
    console.log('\nüìÖ ANALYSE DES S√âQUENCES PAR DATE:');
    const [sequences] = await conn.execute(`
      SELECT 
        DATE(created_at) as date,
        COUNT(*) as total_demandes,
        GROUP_CONCAT(reference ORDER BY reference) as references
      FROM demandes 
      GROUP BY DATE(created_at) 
      ORDER BY date DESC 
      LIMIT 10
    `);
    
    sequences.forEach(seq => {
      console.log(`üìÖ ${seq.date}: ${seq.total_demandes} demandes - ${seq.references}`);
    });
    
    // 3. Identifier les probl√®mes de s√©quences
    console.log('\nüîç D√âTECTION DES PROBL√àMES DE S√âQUENCES:');
    const [problemDates] = await conn.execute(`
      SELECT 
        DATE(created_at) as date,
        COUNT(*) as total,
        MIN(CAST(SUBSTRING(reference, 9) AS UNSIGNED)) as min_seq,
        MAX(CAST(SUBSTRING(reference, 9) AS UNSIGNED)) as max_seq
      FROM demandes 
      WHERE reference IS NOT NULL 
      GROUP BY DATE(created_at)
      HAVING COUNT(*) > 1
      ORDER BY date DESC
    `);
    
    if (problemDates.length === 0) {
      console.log('‚úÖ Aucun probl√®me de s√©quence d√©tect√©');
    } else {
      problemDates.forEach(prob => {
        console.log(`‚ö†Ô∏è  ${prob.date}: ${prob.total} demandes, s√©quences ${prob.min_seq} √† ${prob.max_seq}`);
      });
    }
    
    // 4. Proposer des corrections
    console.log('\nüõ†Ô∏è  PROPOSITIONS DE CORRECTION:');
    
    // V√©rifier s'il y a des r√©f√©rences NULL
    const [nullRefs] = await conn.execute(
      'SELECT COUNT(*) as count FROM demandes WHERE reference IS NULL'
    );
    
    if (nullRefs[0].count > 0) {
      console.log(`‚ö†Ô∏è  ${nullRefs[0].count} demandes sans r√©f√©rence - √† corriger`);
    }
    
    // V√©rifier les r√©f√©rences mal format√©es
    const [malformedRefs] = await conn.execute(
      'SELECT COUNT(*) as count FROM demandes WHERE reference NOT REGEXP "^[0-9]{8}-[0-9]{4}$"'
    );
    
    if (malformedRefs[0].count > 0) {
      console.log(`‚ö†Ô∏è  ${malformedRefs[0].count} r√©f√©rences mal format√©es - √† corriger`);
    }
    
    await conn.end();
    console.log('\n‚úÖ Diagnostic termin√©');
    
  } catch (err) {
    console.error('‚ùå Erreur lors du diagnostic:', err);
  }
}

// Ex√©cuter le diagnostic
fixReferences();



