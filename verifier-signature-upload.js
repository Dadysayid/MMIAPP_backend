const mysql = require('mysql2/promise');

const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'gestion_autorisations'
};

async function verifierSignatureUpload() {
  try {
    console.log('üîç V√©rification de la Signature Upload√©e...\n');
    
    const conn = await mysql.createConnection(dbConfig);
    
    // 1. V√©rifier la structure de la table demandes
    console.log('üìã 1. Structure de la table demandes :');
    const [structure] = await conn.execute('DESCRIBE demandes');
    const hasDonnees = structure.some(col => col.Field === 'donnees');
    const hasFichierAutorisation = structure.some(col => col.Field === 'fichier_autorisation');
    
    console.log(`   ${hasDonnees ? '‚úÖ' : '‚ùå'} Champ 'donnees' (JSON) : ${hasDonnees}`);
    console.log(`   ${hasFichierAutorisation ? '‚úÖ' : '‚ùå'} Champ 'fichier_autorisation' : ${hasFichierAutorisation}`);
    
    // 2. V√©rifier les demandes avec autorisation sign√©e
    console.log('\nüü¢ 2. Demandes avec autorisation sign√©e :');
    const [demandesSignees] = await conn.execute(`
      SELECT d.id, d.reference, d.type, d.statut, d.donnees, d.fichier_autorisation
      FROM demandes d
      WHERE d.statut = 'AUTORISATION_SIGNEE'
      ORDER BY d.id DESC
      LIMIT 3
    `);
    
    if (demandesSignees.length === 0) {
      console.log('   ‚ùå Aucune demande avec autorisation sign√©e trouv√©e');
    } else {
      console.log(`   ‚úÖ ${demandesSignees.length} demande(s) avec autorisation sign√©e :`);
      demandesSignees.forEach(demande => {
        console.log(`      üìã ID: ${demande.id}, R√©f: ${demande.reference}, Type: ${demande.type}`);
        
        // Analyser le champ donnees (JSON)
        if (demande.donnees) {
          try {
            const donnees = JSON.parse(demande.donnees);
            console.log(`         üìÑ Donn√©es JSON: ${Object.keys(donnees).length} champs`);
            
            // Chercher les champs li√©s √† la signature
            const signatureFields = Object.keys(donnees).filter(key => 
              key.toLowerCase().includes('signature') || 
              key.toLowerCase().includes('upload') ||
              key.toLowerCase().includes('image')
            );
            
            if (signatureFields.length > 0) {
              console.log(`         ‚úçÔ∏è Champs signature trouv√©s: ${signatureFields.join(', ')}`);
              signatureFields.forEach(field => {
                const value = donnees[field];
                if (typeof value === 'string' && value.startsWith('data:image/')) {
                  console.log(`         üñºÔ∏è ${field}: Image upload√©e (${value.length} caract√®res)`);
                } else {
                  console.log(`         üìù ${field}: ${typeof value} - ${String(value).substring(0, 100)}...`);
                }
              });
            } else {
              console.log(`         ‚ùå Aucun champ signature trouv√© dans les donn√©es`);
            }
            
          } catch (parseError) {
            console.log(`         ‚ùå Erreur parsing JSON: ${parseError.message}`);
          }
        } else {
          console.log(`         ‚ùå Pas de donn√©es JSON`);
        }
        
        // V√©rifier le fichier d'autorisation
        if (demande.fichier_autorisation) {
          console.log(`         üìÑ Fichier autorisation: ${demande.fichier_autorisation.length} bytes`);
        } else {
          console.log(`         ‚ùå Pas de fichier d'autorisation`);
        }
      });
    }
    
    // 3. V√©rifier toutes les demandes pour trouver des signatures
    console.log('\nüîç 3. Recherche de signatures dans toutes les demandes :');
    const [allDemandes] = await conn.execute(`
      SELECT d.id, d.reference, d.donnees
      FROM demandes d
      WHERE d.donnees IS NOT NULL
      ORDER BY d.id DESC
      LIMIT 5
    `);
    
    if (allDemandes.length === 0) {
      console.log('   ‚ùå Aucune demande avec donn√©es JSON trouv√©e');
    } else {
      console.log(`   ‚úÖ ${allDemandes.length} demande(s) avec donn√©es JSON :`);
      allDemandes.forEach(demande => {
        try {
          const donnees = JSON.parse(demande.donnees);
          const signatureFields = Object.keys(donnees).filter(key => 
            key.toLowerCase().includes('signature') || 
            key.toLowerCase().includes('upload') ||
            key.toLowerCase().includes('image')
          );
          
          if (signatureFields.length > 0) {
            console.log(`      üìã Demande ${demande.id} (${demande.reference}):`);
            signatureFields.forEach(field => {
              const value = donnees[field];
              if (typeof value === 'string' && value.startsWith('data:image/')) {
                console.log(`         üñºÔ∏è ${field}: Image upload√©e (${value.length} caract√®res)`);
              } else {
                console.log(`         üìù ${field}: ${typeof value}`);
              }
            });
          }
        } catch (parseError) {
          // Ignorer les erreurs de parsing
        }
      });
    }
    
    // 4. Recommandations
    console.log('\nüí° 4. Recommandations pour corriger l\'affichage :');
    console.log('   1. V√©rifiez que la signature est bien upload√©e lors de la signature');
    console.log('   2. V√©rifiez que la signature est stock√©e dans le champ donnees');
    console.log('   3. V√©rifiez que generateAutorisationOfficielle r√©cup√®re la signature');
    console.log('   4. V√©rifiez que la signature est affich√©e sur le PDF final');
    
    await conn.end();
    
    console.log('\n‚úÖ V√©rification de la signature upload√©e termin√©e !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

verifierSignatureUpload();



